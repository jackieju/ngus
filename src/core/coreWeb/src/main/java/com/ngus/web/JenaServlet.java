/*
 * Created on 2005-4-6
 *
 * TODO To change the template for this generated file go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
package com.ngus.web;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.rdf.model.Resource;
import com.ngus.comment.CommentEngine;
import com.ngus.comment.CommentObject;
import com.ngus.dataengine.CacheWriter;
import com.ngus.dataengine.DataEngine;
import com.ngus.dataengine.IDataEngine;
import com.ngus.dataengine.RDFEngine;
import com.ngus.dataengine.ResDesObject;
import com.ngus.dataengine.ResourceObject;
import com.ngus.message.MessageEngine;
import com.ngus.message.MessageObject;
import com.ngus.resengine.JCRContentRepository;
import com.ns.dataobject.Attribute;
import com.ns.exception.NSException;
import com.ns.log.Log;

/**
 * @author I027910
 * 
 * TODO To change the template for this generated type comment go to Window -
 * Preferences - Java - Code Style - Code Templates
 */
public class JenaServlet extends HttpServlet {

	public void init(ServletConfig config) throws ServletException {
		super.init(config);
		// TODO Method stub generated by Lomboz
	}

	public void destroy() {
		super.destroy();
		// TODO Method stub generated by Lomboz
	}

	protected void doGet(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {
		// TODO Method stub generated by Lomboz
	}

	String storageType;

	String storagePath;

	String shareLevel;

	String title;

	String content;

	int start;

	int number;

	String modelName;

	String Id;

	String header = "-------- parameters -----<br>" + "model name = "
			+ modelName + "<br>" + "resource id = " + Id + "<br>"
			+ "-------------------------<br>";

	String queryString;

	protected void doPost(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {

		Log.trace("enter");
		request.setCharacterEncoding("UTF-8");
		response.setCharacterEncoding("UTF-8");
		response.setContentType("text/html; charset=UTF-8");

		String requestType = request.getParameter("request");
		Log.trace("request type = " + requestType);
		if (requestType.equalsIgnoreCase("post"))
			return;

		storageType = request.getParameter("storageType");
		storagePath = request.getParameter("storagePath");
		shareLevel = request.getParameter("shareLevel");
		title = request.getParameter("title");
		content = request.getParameter("content");
		queryString = request.getParameter("queryString");
		modelName = request.getParameter("modelName");
		Id = request.getParameter("resourceId");
		try {
			if (request.getParameter("start") != null)
				start = Integer.parseInt(request.getParameter("start"));
			if (request.getParameter("number") != null)
				number = Integer.parseInt(request.getParameter("number"));
		} catch (Exception e) {
			Log.error(e);
		}

		// get model
		if (requestType.equalsIgnoreCase("getModel")) {
			try {
				response.getWriter().println(header);
				response.getWriter().println(
						DataEngine.instance().getAllResourceOfModel(modelName)
								.toHtml());
			} catch (Exception e) {
				Log.error(e);
				throw new ServletException(e.toString());

			}
		}

		// delete all model
		if (requestType.equalsIgnoreCase("deleteAllModel")) {
			response.getWriter().println(header);
			try {
				DataEngine.instance().deleteAll(modelName);
			} catch (Exception e) {
				Log.error(e);
				throw new ServletException(e.toString());

			}
		}

		// updateResourceDes(String Id, ResDesObject ob)
		if (requestType.equalsIgnoreCase("updateResourceDes")) {
			response.getWriter().println(header);
			ResDesObject ob = new ResDesObject(modelName);
			ob.setResId(Id);
			String[] properties = request.getParameterValues("property");
			String[] values = request.getParameterValues("value");
			// String ret;
			Log.trace("property number: " + properties.length);
			try {
				for (int i = 0; i < properties.length; i++) {
					if (properties[i] == null || properties[i].length() == 0)
						continue;
					if (values[i] == null || values[i].length() == 0)
						continue;

					ob.addAttr(new Attribute(properties[i],
							Attribute.ATTR_DT_STR, values[i]));

				}
				DataEngine.instance().updateResourceDes(ob);
				response.getWriter().println("ok");
			} catch (Exception e) {
				Log.error(e);
				throw new ServletException(e.toString());

			}

		}

		// getResourceDes(String Id, String modelName)
		if (requestType.equalsIgnoreCase("getResourceDes")) {
			response.getWriter().println(header);
			try {
				ResDesObject ro = DataEngine.instance().getResourceDesObj(Id,
						modelName);
				response.getWriter().println(ro.printHtml());
			} catch (Exception e) {
				Log.error(e);
				throw new ServletException(e.toString());
			}
		}

		// getResourceProperty(String Id, String modelName, String property)
		if (requestType.equalsIgnoreCase("getResourceProperty")) {
			response.getWriter().println(header);
			try {
				String propertyName = request.getParameter("propertyName");
				response.getWriter().println(
						DataEngine.instance().getResourceProperty(Id,
								modelName, propertyName));
			} catch (Exception e) {
				Log.error(e);
				throw new ServletException("exception rasied");

			}
		}

		// getResourceObjById(String Id)
		if (requestType.equalsIgnoreCase("getResourceObjById")) {
			response.getWriter().println(header);
			try {
				ResourceObject ro = DataEngine.instance().getResourceObjById(
						Id, true);
				response.getWriter().println(ro.printHtml());
			} catch (Exception e) {
				Log.error(e);
				throw new ServletException(e.toString());

			}
		}

		// delete resource des
		if (requestType.equalsIgnoreCase("deleteResource")) {
			response.getWriter().println(header);
			try {
				if (modelName != null && modelName.length() != 0)
					DataEngine.instance().deleteResourceDes(Id, modelName);
				else
					DataEngine.instance().deleteResource(Id, true);
				response.getWriter().println("ok");
			} catch (Exception e) {
				Log.error(e);
				throw new ServletException(e.toString());

			}
		}

		/*
		 * // select (not available) if (requestType.equalsIgnoreCase("select")) {
		 * response.getWriter().println(header); DataObject ob = new
		 * DataObject(modelName); String[] properties =
		 * request.getParameterValues("property"); String[] values =
		 * request.getParameterValues("value"); String ret; Log.trace("property
		 * number: " + properties.length); try { for (int i = 0; i <
		 * properties.length; i++) { if (properties[i] == null ||
		 * properties[i].length() == 0) continue; if (values[i] == null ||
		 * values[i].length() == 0) continue;
		 * 
		 * ob.addAttr(new Attribute(properties[i], Attribute.ATTR_DT_STR,
		 * values[i])); }
		 * 
		 * ret = DataEngine.instance().getAllResourceOfModel("clipboard")
		 * .toXML(); } catch (Exception e) { Log.error(e); throw new
		 * ServletException(e.toString()); } }
		 */

		// show xml of model
		if (requestType.equalsIgnoreCase("showModelXML")) {
			try {
				String header1 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>";
				response.getWriter()
						.println(
								header1
										+ RDFEngine.instance().getXMLOfModel(
												modelName));
			} catch (Exception e) {
				Log.error(e);
				throw new ServletException(e.toString());
			}
		}

		// create model
		if (requestType.equalsIgnoreCase("createModel")) {
			try {
				RDFEngine.instance().createModel(modelName);
				response.getWriter().println("OK");
			} catch (Exception e) {
				Log.error(e);
				throw new ServletException(e.toString());
			}
		}

		// show xml of jcr
		if (requestType.equalsIgnoreCase("showJCRXML")) {
			try {
				response.getWriter().println(
						JCRContentRepository.instance().printWorkspace(
								modelName, "/" + Id));
			} catch (Exception e) {
				Log.error(e);
				throw new ServletException(e.toString());
			}
		}

		// getResourceTree
		if (requestType.equalsIgnoreCase("getResourceTree")) {
			try {
				Log.trace("1");
				DataEngine de = DataEngine.instance();
				Log.trace("2" + de);
				ResourceObject ro = de.getResourceTree(Id, -1);
				Log.trace("3" + ro);
				response.getWriter().println(ro.printHtml());
			} catch (Exception e) {
				Log.trace(Log.printExpStack(e));
				System.out.println(Log.printExpStack(e));
				Log.error(e);
				throw new ServletException(e.toString());
			}
		}

		// updateResourceValue
		if (requestType.equalsIgnoreCase("updateResourceValue")) {
			try {
				ResourceObject ro = new ResourceObject();
				ro.setResId(Id);
				ro
						.setValue(new ByteArrayInputStream(content
								.getBytes("UTF-8")));
				DataEngine.instance().updateResourceObject(ro);
				response.getWriter().println("OK");
			} catch (Exception e) {
				Log.error(e);
				throw new ServletException(e.toString());
			}
		}

		// updateResourceValue
		if (requestType.equalsIgnoreCase("updateResShareLevel")) {
			try {
				DataEngine.instance().updateResourceShareLevel(Id,
						new Integer(shareLevel).intValue(), false);
				response.getWriter().println("OK");
			} catch (Exception e) {
				Log.error(e);
				throw new ServletException(e.toString());
			}
		}

		// createResource
		if (requestType.equalsIgnoreCase("createResource")) {
			String ret;
			ResourceObject ro = new ResourceObject();
			try {
				ro.setShareLevel(new Integer(shareLevel).intValue());
				ro.setStoragePath(storagePath);
				ro.setStorageType(storageType);
				ro.setTitle(title);
				ro.setType(IDataEngine.RES_TYPE_TEXT);
				if (this.Id != null && Id.length() > 0)
					ro.setResId(Id);
				InputStream is = new ByteArrayInputStream(content
						.getBytes("UTF-8"));

				ro.setValue(is);

				ResDesObject rdo = new ResDesObject(modelName);
				ro.addResDesObject(rdo);

				// prepare attributes
				String[] properties = request.getParameterValues("property");
				String[] values = request.getParameterValues("value");

				Log.trace("property number: " + properties.length);

				for (int i = 0; i < properties.length; i++) {
					if (properties[i] == null || properties[i].length() == 0)
						continue;
					if (values[i] == null || values[i].length() == 0)
						continue;

					rdo.addAttr(new Attribute(properties[i],
							Attribute.ATTR_DT_STR, values[i]));
				}

				// update
				ret = DataEngine.instance().post(ro);
			} catch (Exception e) {
				Log.error(e);
				throw new ServletException(new String(e.toString()));

			}
			response
					.getWriter()
					.println(
							"<?xml version=\"1.0\" encoding=\"UTF-8\"?><GNUS xmlns:gnus = \"http://\"> <gnus:resourceId>"
									+ ret + "</gnus:resourceId>\n</GNUS>");
		}

		// search
		if (requestType.equalsIgnoreCase("searchJCR")) {
			String ret = "";
			Attribute total = new Attribute("total", Attribute.ATTR_DT_INT);

			try {
				
				List<ResourceObject> list = DataEngine.instance().search(
						modelName, queryString, start, number, total, null);
				Log.trace("query result size is " + list.size());
				for (int i = 0; i < list.size(); i++) {
					ret += list.get(i).printHtml() + "<br>\n";
				}
				ret += "--------<br>\nFound " + list.size()
						+ " records (total=" + total.getValue() + ")";

			} catch (Exception e) {
				Log.error(e);
				throw new ServletException(new String(e.toString()));

			}

			response.getWriter().println(ret);
		}

		// select
		if (requestType.equalsIgnoreCase("select")) {
			String ret = "";
			Attribute total = new Attribute("total", Attribute.ATTR_DT_INT);
			try {
				List<ResourceObject> list = DataEngine.instance().search(
						modelName, request.getParameter("where"),
						request.getParameter("orderby"),
						request.getParameter("asc").equalsIgnoreCase("true"),
						start, number, total);
				Log.trace("query result size is " + list.size());
				for (int i = 0; i < list.size(); i++) {
					ret += list.get(i).printHtml() + "<br>\n";
				}
				ret += "--------<br>\nFound " + list.size() + " records(total="
						+ total.getValue() + ")";
			} catch (Exception e) {
				Log.error(e);
				throw new ServletException(new String(e.toString()));

			}

			response.getWriter().println(ret);
		}

		// testChinese
		if (requestType.equalsIgnoreCase("testChinese")) {

			String text = request.getParameter("text");

			response.getWriter().println(text);
			response.getWriter().println("中文<br>");
			response.getWriter().println(
					"request encoding: " + request.getCharacterEncoding());
			response.getWriter().println(
					"<br>request content type: " + request.getContentType());

			response.getWriter().println(testChinese(text));
		}

		// getMemCachedStatus
		if (requestType.equalsIgnoreCase("getMemCachedStatus")) {
			response.getWriter().println(getMemCachedStatus());
		}

		if (requestType.equalsIgnoreCase("getResourceByType")) {
			response.getWriter().println(
					getResourceByType(request.getParameter("type"), request
							.getParameter("user")));
		}
		// throw new ServletException("unsupported request type");

		// get Comment By comment Id
		if (requestType.equalsIgnoreCase("getCommentById")) {

			String scomId = request.getParameter("comId");

			Long comId = Long.parseLong(scomId);

			Log.trace("comId :" + comId);

			CommentObject comObj = null;
			try {
				comObj = CommentEngine.instance().getCommentById(comId);
			} catch (NSException e) {
				// TODO Auto-generated catch block
				Log.error(e);
				e.printStackTrace();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				Log.error(e);
				e.printStackTrace();
			}
			response.getWriter().println("<html><title>test</title>");
			response.getWriter().println("<body>");
			response.getWriter().println(
					"Comment Id:" + comObj.getCommentId() + "<p>");
			response.getWriter().println(
					"Resource Id:" + comObj.getResourceId() + "<p>");
			response.getWriter().println("User:" + comObj.getUser() + "<p>");
			response.getWriter().println("Content: " + comObj.getContent());
			response.getWriter().println("</body></html>");

		}

		// Send Message ===================================================
		if (requestType.equalsIgnoreCase("sendMessage")) {

			String postUserId = request.getParameter("postUserId");
			String receiveUserId = request.getParameter("receiveUserId");
			String title = request.getParameter("title");
			String content = request.getParameter("content");

			MessageObject mesObj = null;
			try {
				mesObj = MessageEngine.instance().sendMsg(postUserId,
						receiveUserId, title, content);
			} catch (NSException e) {
				// TODO Auto-generated catch block

				e.printStackTrace();
			} catch (Exception e) {
				// TODO Auto-generated catch block

				e.printStackTrace();
			}
			System.out.println(mesObj.getPostUserId());
			System.out.println(mesObj.getReceiveUserId());
			System.out.println(mesObj.getTitle());
			System.out.println(mesObj.getContent());

			response.getWriter().println("<html><title>test</title>");
			response.getWriter().println("<body>");
			response.getWriter().println(
					"postUserId:" + mesObj.getPostUserId() + "<p>");
			response.getWriter().println(
					"receiveUserId:" + mesObj.getReceiveUserId() + "<p>");
			response.getWriter().println("Title:" + mesObj.getTitle() + "<p>");
			response.getWriter().println("Content: " + mesObj.getContent());
			response.getWriter().println("</body></html>");

		}
		//		

		// SearchMessage Message
		// ===================================================
		if (requestType.equalsIgnoreCase("searchMessage")) {

			String messageId = request.getParameter("messageId");
			int id = Integer.parseInt(messageId);
			System.out.println(id);

			MessageObject mesObj = null;
			try {
				mesObj = MessageEngine.instance().searchMsg(id);
			} catch (NSException e) {
				// TODO Auto-generated catch block

				e.printStackTrace();
			} catch (Exception e) {
				// TODO Auto-generated catch block

				e.printStackTrace();
			}
			System.out.println(mesObj.getPostUserId());
			System.out.println(mesObj.getReceiveUserId());
			System.out.println(mesObj.getTitle());
			System.out.println(mesObj.getContent());

			response.getWriter().println("<html><title>test</title>");
			response.getWriter().println("<body>");
			response.getWriter().println(
					"postUserId:" + mesObj.getPostUserId() + "<p>");
			response.getWriter().println(
					"receiveUserId:" + mesObj.getReceiveUserId() + "<p>");
			response.getWriter().println("Title:" + mesObj.getTitle() + "<p>");
			response.getWriter().println("Content: " + mesObj.getContent());
			response.getWriter().println("</body></html>");

		}

		// listPostMsg ===================================================
		if (requestType.equalsIgnoreCase("listPostMsg")) {

			String postUserId = request.getParameter("postUserId");

			System.out.println(postUserId);

			List<MessageObject> messageList = null;

			// MessageObject mesObj = null;
			try {
				// messageList=MessageEngine.instance().listPostMsg(postUserId);
			} catch (Exception e) {
				// TODO Auto-generated catch block

				e.printStackTrace();
			}
			int length = messageList.size();
			response.getWriter().println("<html><title>test</title>");
			response.getWriter().println("<body>");

			for (int i = 0; i < length; i++) {

				response.getWriter().println(
						"postUserId:" + messageList.get(i).getPostUserId()
								+ "<p>");
				response.getWriter()
						.println(
								"receiveUserId:"
										+ messageList.get(i).getReceiveUserId()
										+ "<p>");
				response.getWriter().println(
						"Title:" + messageList.get(i).getTitle() + "<p>");
				response.getWriter().println(
						"Content: " + messageList.get(i).getContent() + "<p>");

			}
			response.getWriter().println("</body></html>");

		}

		// listReceiveMsg ===================================================
		if (requestType.equalsIgnoreCase("listReceiveMsg")) {

			String receiveUserId = request.getParameter("receiveUserId");

			System.out.println(receiveUserId);

			List<MessageObject> messageList = null;

			// MessageObject mesObj = null;
			try {
				// messageList=MessageEngine.instance().listReceiveMsg(receiveUserId);
			} catch (Exception e) {

				e.printStackTrace();
			}
			int length = messageList.size();
			response.getWriter().println("<html><title>test</title>");
			response.getWriter().println("<body>");

			for (int i = 0; i < length; i++) {

				response.getWriter().println(
						"postUserId:" + messageList.get(i).getPostUserId()
								+ "<p>");
				response.getWriter()
						.println(
								"receiveUserId:"
										+ messageList.get(i).getReceiveUserId()
										+ "<p>");
				response.getWriter().println(
						"Title:" + messageList.get(i).getTitle() + "<p>");
				response.getWriter().println(
						"Content: " + messageList.get(i).getContent() + "<p>");

			}
			response.getWriter().println("</body></html>");

		}

		// replyMsg ===================================================
		if (requestType.equalsIgnoreCase("replyMsg")) {

			String messageId = request.getParameter("messageId");
			int id = Integer.parseInt(messageId);

			String content = request.getParameter("content");
			String title = request.getParameter("title");
			// System.out.println(receiveUserId);

			// List<MessageObject> messageList = null;

			MessageObject mesObj = null;
			try {
				mesObj = MessageEngine.instance().reply(id, content, title);
			} catch (NSException e) {
				// TODO Auto-generated catch block

				e.printStackTrace();
			} catch (Exception e) {
				// TODO Auto-generated catch block

				e.printStackTrace();
			}
			response.getWriter().println("<html><title>test</title>");
			response.getWriter().println("<body>");
			response.getWriter().println(
					"postUserId:" + mesObj.getPostUserId() + "<p>");
			response.getWriter().println(
					"receiveUserId:" + mesObj.getReceiveUserId() + "<p>");
			response.getWriter().println("Title:" + mesObj.getTitle() + "<p>");
			response.getWriter().println(
					"Content: " + mesObj.getContent() + "<p>");
			response.getWriter().println("</body></html>");

		}

		// replyMsg ===================================================
		if (requestType.equalsIgnoreCase("sendInvitation")) {

			String postUserId = request.getParameter("postUserId");

			String receiveUserId = request.getParameter("receiveUserId");

			// System.out.println(receiveUserId);

			// List<MessageObject> messageList = null;

			MessageObject mesObj = null;
			try {
				mesObj = MessageEngine.instance().sendInvitation(postUserId,
						receiveUserId);
			} catch (NSException e) {
				// TODO Auto-generated catch block

				e.printStackTrace();
			} catch (Exception e) {
				// TODO Auto-generated catch block

				e.printStackTrace();
			}
			response.getWriter().println("<html><title>test</title>");
			response.getWriter().println("<body>");
			response.getWriter().println(
					"postUserId:" + mesObj.getPostUserId() + "<p>");
			response.getWriter().println(
					"receiveUserId:" + mesObj.getReceiveUserId() + "<p>");
			response.getWriter().println("Title:" + mesObj.getTitle() + "<p>");
			response.getWriter().println("Content: " + mesObj.getContent());
			response.getWriter().println("</body></html>");

		}

		// search Text ===================================================
		if (requestType.equalsIgnoreCase("searchText")) {

			String receiveId = request.getParameter("receiveId");

			String text = request.getParameter("text");

			System.out.println(receiveId);

			System.out.println(text);

			List<MessageObject> messageList = null;

			// MessageObject mesObj = null;
			try {
				messageList = MessageEngine.instance().searchText(receiveId,
						text);
			} catch (NSException e) {
				// TODO Auto-generated catch block

				e.printStackTrace();
			} catch (Exception e) {
				// TODO Auto-generated catch block

				e.printStackTrace();
			}
			int length = messageList.size();
			response.getWriter().println("<html><title>test</title>");
			response.getWriter().println("<body>");

			for (int i = 0; i < length; i++) {

				response.getWriter().println(
						"postUserId:" + messageList.get(i).getPostUserId()
								+ "<p>");
				response.getWriter()
						.println(
								"receiveUserId:"
										+ messageList.get(i).getReceiveUserId()
										+ "<p>");
				response.getWriter().println(
						"Title:" + messageList.get(i).getTitle() + "<p>");
				response.getWriter().println(
						"Content: " + messageList.get(i).getContent() + "<p>");

			}
			response.getWriter().println("</body></html>");

		}

		// Add content to a resource
		if (requestType.equalsIgnoreCase("addComment")) {

			String content = request.getParameter("content");

			String resId = request.getParameter("resId");

			String userId = request.getParameter("userId");
			try {
				CommentEngine.instance().addComment(content, resId, userId);
			} catch (NSException e) {
				// TODO Auto-generated catch block
				response.getWriter().println("error");
				e.printStackTrace();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				response.getWriter().println("error");
				e.printStackTrace();
			}

			response.getWriter().println(content);
			response.getWriter().println(resId);
			response.getWriter().println(userId);
			response.getWriter().println("Add successful");
		}

		// Get List of Comments by Resource Id
		if (requestType.equalsIgnoreCase("ListCommentsForRes")) {

			String resId = request.getParameter("resId");
			int start;
			int end;
			int pagecout = 10;
			int totalnum;
			int totalpage;

			List<CommentObject> lcomObj = null;
			try {
				// lcomObj =
				// CommentEngine.instance().ListCommentsForRes(resId,0);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			response.getWriter().println("<html><title>fen ye</title>");
			response.getWriter().println("<body>");
			totalnum = lcomObj.size();
			int i;
			for (i = 0; i < totalnum; i++) {
				response.getWriter().println(
						"Comment Id:" + lcomObj.get(i).getCommentId() + "<br>");
				response.getWriter().println(
						"Resource Id:" + lcomObj.get(i).getResourceId()
								+ "<br>");
				response.getWriter().println(
						"User:" + lcomObj.get(i).getUser() + "<br>");
				response.getWriter().println(
						"Content: " + lcomObj.get(i).getContent() + "<br>");
			}
			response.getWriter().println("</body></html>");
			response.getWriter().println("</body></html>");

		}

		// Get List of Comments by User
		if (requestType.equalsIgnoreCase("ListCommentsForUser")) {

			String user = request.getParameter("user");

			System.out.println(user);

			List<CommentObject> lcomObj = null;
			try {
				// lcomObj =
				// CommentEngine.instance().ListCommentsForUser(user,0);
				int cout = lcomObj.size();
				System.out.println("list size:" + cout);
				int i;
				for (i = 0; i < cout; i++) {
					System.out.println("Comment Id:"
							+ lcomObj.get(i).getCommentId());
					response.getWriter().println(
							"Comment Id:" + lcomObj.get(i).getCommentId());
					System.out.println("Resource Id:"
							+ lcomObj.get(i).getResourceId());
					response.getWriter().println(
							"Resource Id:" + lcomObj.get(i).getResourceId());
					response.getWriter().println(
							"User:" + lcomObj.get(i).getUser());
					response.getWriter().println(
							"Content: " + lcomObj.get(i).getContent());
				}

			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}

		if (requestType.equalsIgnoreCase("locknode")) {
			try {
				Log.trace("recursive=" + request.getParameter("recursive"));
				Log.trace("sessionScoped="
						+ request.getParameter("sessionScoped"));
				Log.trace("workspace=" + request.getParameter("workspace"));
				Log.trace("path=" + request.getParameter("path"));
				boolean isDeep = false;
				boolean ss = false;
				if (request.getParameter("sessionScoped") != null)
					ss = true;
				if (request.getParameter("recursive") != null)
					isDeep = true;
				JCRContentRepository.instance().lockNode(
						request.getParameter("workspace"),
						request.getParameter("path"),
						request.getParameter("force") != null, isDeep, ss);
				response.getWriter().println("ok");
			} catch (Exception e) {
				Log.error(e);
				response.getWriter().println(Log.printExpStack(e));
			}

		}

		if (requestType.equalsIgnoreCase("unlocknode")) {
			try {
				Log.trace("unlocknode");
				JCRContentRepository.instance().unlockNode(
						request.getParameter("workspace"),
						request.getParameter("path"));
				response.getWriter().println("ok");
			} catch (Exception e) {
				Log.error(e);
				response.getWriter().println(Log.printExpStack(e));
			}

		}

		if (requestType.equalsIgnoreCase("savesession")) {
			try {
				Log.trace("savesession");
				JCRContentRepository.instance().saveSession(
						request.getParameter("workspace"));
				response.getWriter().println("ok");
			} catch (Exception e) {
				Log.error(e);
				response.getWriter().println(Log.printExpStack(e));
			}

		}

		if (requestType.equalsIgnoreCase("cleanJCR")) {
			try {
				Log.trace("cleanJCR");
				JCRContentRepository.instance().cleanup(
						request.getParameter("workspace"));
				response.getWriter().println("ok");
			} catch (Exception e) {
				Log.error(e);
				response.getWriter().println(Log.printExpStack(e));
			}

		}

		if (requestType.equalsIgnoreCase("setLog")) {
			try {
				Log.trace("setLog");
				String file = request.getParameter("file");

				boolean log = true;
				if (request.getParameter("log") != null)
					log = true;
				else
					log = false;
				boolean warning = true;
				if (request.getParameter("warning") != null)
					warning = true;
				else
					warning = false;
				boolean error = true;
				if (request.getParameter("error") != null)
					error = true;
				else
					error = false;
				boolean trace = true;
				if (request.getParameter("trace") != null)
					trace = true;
				else
					trace = false;
				int tl = Integer.parseInt(request.getParameter("traceLevel"));

				Log.set(file, log, warning, trace, error, tl, -1, false, -1);
				response.getWriter().println("ok");
			} catch (Exception e) {
				Log.error(e);
				response.getWriter().println(Log.printExpStack(e));
			}
		}
		
		if (requestType.equalsIgnoreCase("setLogCat")) {
			try {
				Log.trace("setLogCat");
				String cat = request.getParameter("category");
				
				boolean enable = true;
				if (request.getParameter("enable") != null)
					enable = true;
				else
					enable = false;
				Log.enableCategory(cat, enable);
					

				boolean log = true;
				if (request.getParameter("log") != null)
					log = true;
				else
					log = false;
				boolean warning = true;
				if (request.getParameter("warning") != null)
					warning = true;
				else
					warning = false;
				boolean error = true;
				if (request.getParameter("error") != null)
					error = true;
				else
					error = false;
				boolean trace = true;
				if (request.getParameter("trace") != null)
					trace = true;
				else
					trace = false;
				int tl = Integer.parseInt(request.getParameter("traceLevel"));

				Log.getInst(cat)._set(null, log, warning, trace, error, tl, -1, false, -1);
				response.getWriter().println("ok");
			} catch (Exception e) {
				Log.error(e);
				response.getWriter().println(Log.printExpStack(e));
			}
		}
		
		
		
		Log.trace("leave");
	}

	public String testChinese(String text) {
		String ret = "";
		try {
			text = text.trim();
			if (text == null || text.length() == 0)
				return "text can not be empty";
			Model model = RDFEngine.openModule("test", true);
			Resource res = model.createResource();
			res.addProperty(model.createProperty(RDFEngine.instance()
					.getModelDesc(""), "p"), text);

			model.commit();

			ret += "put chinese " + text + "to rdf ok.<br>";
			return ret;
		} catch (Exception e) {
			return e.toString();
		}

	}

	public String getMemCachedStatus() {
		return CacheWriter.printStatus();
	}

	public String getResourceByType(String type, String userId) {
		Log.trace("type=" + type);
		Log.trace("userId=" + userId);
		try {
			List<ResourceObject> ret = DataEngine.instance().getROByType(type,
					userId, 0, 1000);
			String str = "return: list size = " + ret.size();
			for (int i = 0; i < ret.size(); i++) {
				str += ret.get(i).printHtml() + "<p/>";
			}
			return str;
		} catch (Exception e) {
			Log.error(e);
		}
		return "error";
	}
}
