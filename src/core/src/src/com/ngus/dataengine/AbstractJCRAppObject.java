package com.ngus.dataengine;

import com.ngus.resengine.IResEngine;
import com.ngus.resengine.JCRContentRepository;
import com.ngus.resengine.ResourceId;
import com.ns.log.Log;

public abstract class AbstractJCRAppObject extends AbstractAppObject{

	public AbstractJCRAppObject(ResourceObject ro) throws Exception{
		super(ro);
	}
	public AbstractJCRAppObject(){
		super();
	}
	
	@Override
	public String getBaseStoragePath() {
		
		if (super.ob == null)		// if no resource object, means it's a empty object, then give the fixed base path "/tree/<appname>/<userid>"	
		{
			String baseStoragePath = "/" + JCRContentRepository.WORKSPACE_TREE+"/"+this.getAppName().toLowerCase();//+"/" + UserManager.getCurrentUser().getUserId();
			return baseStoragePath;
		}
		else{ 
			String path  = null;
			String resId = super.ob.getResId();
			
			if (resId == null || resId.length()==0) // new resource, the res id has not been generated by system yet
			{
				String baseStoragePath = "/" + JCRContentRepository.WORKSPACE_TREE+"/"+this.getAppName().toLowerCase();//+"/" + UserManager.getCurrentUser().getUserId();
				
				return baseStoragePath;
			}
			
			// a resource loaded from system
			try{
				ResourceId rd = new ResourceId(resId);
				path =  "/" + rd.getJcrWorkspace() + rd.getJcrPath();
			}catch(Exception e)
			{
				Log.error(e);
				return "";
			}
			int k = 0;
			for (int i = 0; i < 4; i++){
				k =path.indexOf("/", k)+1;				
			}
			String ret = path.substring(0, k-1);
			return ret;			
		}
		
		
	}

	@Override
	public String getStorageType() {
		return IResEngine.STORAGETYPE_JCR;
	}
}
